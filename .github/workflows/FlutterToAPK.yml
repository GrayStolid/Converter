name: Build Flutter APK

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      FLUTTER_STORAGE_BASE_URL: https://storage.flutter-io.cn

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install Android SDK command-line tools and components
        id: sdk
        run: |
          set -euo pipefail
          SDK_ROOT="$GITHUB_WORKSPACE/android-sdk"
          mkdir -p "$SDK_ROOT"
          REPO_XML="https://dl.google.com/android/repository/repository2-1.xml"
      
          echo "Fetching repository index..."
          curl -sSfL "$REPO_XML" -o repo.xml
      
          echo "Locating commandlinetools-linux ZIP URL..."
          URL=""
          URL=$(grep -oP '(?<=<url>)[^<]*commandlinetools-linux[^<]*\.zip(?=</url>)' repo.xml | head -n1 || true)
          URL=${URL:-$(grep -oP 'https?://[^<]*commandlinetools-linux[^<]*\.zip' repo.xml | head -n1 || true)}
          URL=${URL:-$(grep -oP '(?<=<downloadUrl>)[^<]*commandlinetools-linux[^<]*\.zip(?=</downloadUrl>)' repo.xml | head -n1 || true)}
      
          if [ -z "$URL" ]; then
            echo "No commandlinetools URL found in repository XML, aborting."
            exit 1
          fi
      
          if [[ "$URL" != http* ]]; then
            URL="https://dl.google.com/android/repository/${URL#./}"
          fi
      
          echo "Downloading command line tools from: $URL"
          TMP_DIR="$(mktemp -d)"
          wget -q --show-progress -O "$TMP_DIR/cmdline-tools.zip" "$URL"
          unzip -q "$TMP_DIR/cmdline-tools.zip" -d "$TMP_DIR"
          rm "$TMP_DIR/cmdline-tools.zip"
      
          # Inspect extraction layout and move contents into expected layout: cmdline-tools/latest/...
          # Many ZIPs contain a top-level folder like 'cmdline-tools' or 'commandlinetools'
          EXTRACTED_DIR=$(find "$TMP_DIR" -maxdepth 1 -mindepth 1 -type d | head -n 1)
          if [ -z "$EXTRACTED_DIR" ]; then
            echo "Extraction failed or unexpected layout"; ls -la "$TMP_DIR"; exit 1
          fi
      
          mkdir -p "$SDK_ROOT/cmdline-tools/latest"
          # Copy everything from extracted dir into latest
          cp -R "$EXTRACTED_DIR"/* "$SDK_ROOT/cmdline-tools/latest/" || true
          rm -rf "$TMP_DIR"
      
          # Search for sdkmanager in the installed tree
          SDKMANAGER_PATH=$(find "$SDK_ROOT" -type f -name "sdkmanager" -print -quit || true)
          if [ -z "$SDKMANAGER_PATH" ]; then
            echo "sdkmanager not found after extraction. Listing $SDK_ROOT for debugging:"; ls -R "$SDK_ROOT"
            exit 1
          fi
          echo "Using sdkmanager at: $SDKMANAGER_PATH"
          chmod +x "$SDKMANAGER_PATH"

          echo "Available packages:"
          "$SDKMANAGER_PATH" --list | head -n 100

          # Use sdkmanager binary directly to avoid PATH timing issues
          yes | "$SDKMANAGER_PATH" --sdk_root="$SDK_ROOT" --licenses || true
          "$SDKMANAGER_PATH" --sdk_root="$SDK_ROOT" "platform-tools" "platforms;android-34" "build-tools;35.0.0"
          yes | "$SDKMANAGER_PATH" --sdk_root="$SDK_ROOT" --licenses || true


          # Persist for subsequent steps
          echo "ANDROID_SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          echo "PATH=$SDK_ROOT/cmdline-tools/latest/bin:$SDK_ROOT/platform-tools:$PATH" >> $GITHUB_ENV
      
        shell: bash

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'

      - name: Accept Android licenses (verify)
        run: yes | flutter doctor --android-licenses || true
        
      - name: Cache Flutter packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-
            
      - name: Get Flutter packages
        working-directory: flutter_app
        run: flutter pub get
      
      - name: Build APK (debug)
        working-directory: flutter_app
        run: flutter build apk --debug --no-shrink -v
      
      - name: Build APK (release)
        working-directory: flutter_app
        run: flutter build apk --release --no-shrink -v
      
      - name: Collect APK and engine AARs
        working-directory: flutter_app
        run: |
          mkdir -p artifacts
          cp build/app/outputs/flutter-apk/app-debug.apk artifacts/ || true
          if [ -d "$FLUTTER_ROOT/bin/cache/artifacts/engine" ]; then
            find "$FLUTTER_ROOT/bin/cache/artifacts/engine" -type f -name "*.aar" -print > aars_list.txt || true
            if [ -s aars_list.txt ]; then
              tar -czf artifacts/aars.tgz -T aars_list.txt || true
            fi
          fi
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-apk-and-aars
          path: artifacts
          
      - name: Build APK (release)
        run: flutter build apk --release --no-shrink -v
